{"ast":null,"code":"import _inherits from \"/Users/VIDIT/Desktop/recovery-project/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/VIDIT/Desktop/recovery-project/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createClass from \"/Users/VIDIT/Desktop/recovery-project/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/VIDIT/Desktop/recovery-project/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { getSupportedInputTypes } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Optional, Self, Inject, Input, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport * as i3 from '@angular/material/core';\nimport { mixinErrorState, MatCommonModule, ErrorStateMatcher } from '@angular/material/core';\nimport * as i5 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\nimport * as i4 from '@angular/cdk/text-field';\nimport { TextFieldModule } from '@angular/cdk/text-field';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\n\nfunction getMatInputUnsupportedTypeError(type) {\n  return Error(\"Input type \\\"\".concat(type, \"\\\" isn't supported by matInput.\"));\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\n\n\nvar MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\n\nvar MAT_INPUT_INVALID_TYPES = ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'range', 'reset', 'submit'];\nvar nextUniqueId = 0; // Boilerplate for applying mixins to MatInput.\n\n/** @docs-private */\n\nvar _MatInputBase = mixinErrorState( /*#__PURE__*/function () {\n  function _class(_defaultErrorStateMatcher, _parentForm, _parentFormGroup,\n  /** @docs-private */\n  ngControl) {\n    _classCallCheck(this, _class);\n\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n\n  return _createClass(_class);\n}());\n/** Directive that allows a native input to work inside a `MatFormField`. */\n\n\nvar MatInput = /*#__PURE__*/function (_MatInputBase2) {\n  _inherits(MatInput, _MatInputBase2);\n\n  var _super = _createSuper(MatInput);\n\n  function MatInput(_elementRef, _platform, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, // TODO: Remove this once the legacy appearance has been removed. We only need\n  // to inject the form-field for determining whether the placeholder has been promoted.\n  _formField) {\n    var _this;\n\n    _classCallCheck(this, MatInput);\n\n    _this = _super.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    _this._elementRef = _elementRef;\n    _this._platform = _platform;\n    _this._autofillMonitor = _autofillMonitor;\n    _this._formField = _formField;\n    _this._uid = \"mat-input-\".concat(nextUniqueId++);\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n    _this.focused = false;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n    _this.stateChanges = new Subject();\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n    _this.controlType = 'mat-input';\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n    _this.autofilled = false;\n    _this._disabled = false;\n    _this._type = 'text';\n    _this._readonly = false;\n    _this._neverEmptyInputTypes = ['date', 'datetime', 'datetime-local', 'month', 'time', 'week'].filter(function (t) {\n      return getSupportedInputTypes().has(t);\n    });\n\n    _this._iOSKeyupListener = function (event) {\n      var el = event.target; // Note: We specifically check for 0, rather than `!el.selectionStart`, because the two\n      // indicate different things. If the value is 0, it means that the caret is at the start\n      // of the input, whereas a value of `null` means that the input doesn't support\n      // manipulating the selection range. Inputs that don't support setting the selection range\n      // will throw an error so we want to avoid calling `setSelectionRange` on them. See:\n      // https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n\n      if (!el.value && el.selectionStart === 0 && el.selectionEnd === 0) {\n        // Note: Just setting `0, 0` doesn't fix the issue. Setting\n        // `1, 1` fixes it for the first time that you type text and\n        // then hold delete. Toggling to `1, 1` and then back to\n        // `0, 0` seems to completely fix it.\n        el.setSelectionRange(1, 1);\n        el.setSelectionRange(0, 0);\n      }\n    };\n\n    var element = _this._elementRef.nativeElement;\n    var nodeName = element.nodeName.toLowerCase(); // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n\n    _this._inputValueAccessor = inputValueAccessor || element;\n    _this._previousNativeValue = _this.value; // Force setter to be called in case id was not specified.\n\n    _this.id = _this.id; // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(function () {\n        _elementRef.nativeElement.addEventListener('keyup', _this._iOSKeyupListener);\n      });\n    }\n\n    _this._isServer = !_this._platform.isBrowser;\n    _this._isNativeSelect = nodeName === 'select';\n    _this._isTextarea = nodeName === 'textarea';\n    _this._isInFormField = !!_formField;\n\n    if (_this._isNativeSelect) {\n      _this.controlType = element.multiple ? 'mat-native-select-multiple' : 'mat-native-select';\n    }\n\n    return _this;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  _createClass(MatInput, [{\n    key: \"disabled\",\n    get: function get() {\n      if (this.ngControl && this.ngControl.disabled !== null) {\n        return this.ngControl.disabled;\n      }\n\n      return this._disabled;\n    },\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value); // Browsers may not fire the blur event if the input is disabled too quickly.\n      // Reset from here to ensure that the element doesn't become stuck.\n\n      if (this.focused) {\n        this.focused = false;\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._id;\n    },\n    set: function set(value) {\n      this._id = value || this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"required\",\n    get: function get() {\n      var _a, _b, _c, _d;\n\n      return (_d = (_a = this._required) !== null && _a !== void 0 ? _a : (_c = (_b = this.ngControl) === null || _b === void 0 ? void 0 : _b.control) === null || _c === void 0 ? void 0 : _c.hasValidator(Validators.required)) !== null && _d !== void 0 ? _d : false;\n    },\n    set: function set(value) {\n      this._required = coerceBooleanProperty(value);\n    }\n    /** Input type of the element. */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    },\n    set: function set(value) {\n      this._type = value || 'text';\n\n      this._validateType(); // When using Angular inputs, developers are no longer able to set the properties on the native\n      // input element. To ensure that bindings for `type` work, we need to sync the setter\n      // with the native property. Textarea elements don't support the type property or attribute.\n\n\n      if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n        this._elementRef.nativeElement.type = this._type;\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._inputValueAccessor.value;\n    },\n    set: function set(value) {\n      if (value !== this.value) {\n        this._inputValueAccessor.value = value;\n        this.stateChanges.next();\n      }\n    }\n    /** Whether the element is readonly. */\n\n  }, {\n    key: \"readonly\",\n    get: function get() {\n      return this._readonly;\n    },\n    set: function set(value) {\n      this._readonly = coerceBooleanProperty(value);\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this2 = this;\n\n      if (this._platform.isBrowser) {\n        this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(function (event) {\n          _this2.autofilled = event.isAutofilled;\n\n          _this2.stateChanges.next();\n        });\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      this.stateChanges.next();\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.stateChanges.complete();\n\n      if (this._platform.isBrowser) {\n        this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n      }\n\n      if (this._platform.IOS) {\n        this._elementRef.nativeElement.removeEventListener('keyup', this._iOSKeyupListener);\n      }\n    }\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      if (this.ngControl) {\n        // We need to re-evaluate this on every change detection cycle, because there are some\n        // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n        // that whatever logic is in here has to be super lean or we risk destroying the performance.\n        this.updateErrorState();\n      } // We need to dirty-check the native element's value, because there are some cases where\n      // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n      // updating the value using `emitEvent: false`).\n\n\n      this._dirtyCheckNativeValue(); // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n      // present or not depends on a query which is prone to \"changed after checked\" errors.\n\n\n      this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n\n  }, {\n    key: \"focus\",\n    value: function focus(options) {\n      this._elementRef.nativeElement.focus(options);\n    }\n    /** Callback for the cases where the focused state of the input changes. */\n\n  }, {\n    key: \"_focusChanged\",\n    value: function _focusChanged(isFocused) {\n      if (isFocused !== this.focused) {\n        this.focused = isFocused;\n        this.stateChanges.next();\n      }\n    }\n  }, {\n    key: \"_onInput\",\n    value: function _onInput() {// This is a noop function and is used to let Angular know whenever the value changes.\n      // Angular will run a new change detection each time the `input` event has been dispatched.\n      // It's necessary that Angular recognizes the value change, because when floatingLabel\n      // is set to false and Angular forms aren't used, the placeholder won't recognize the\n      // value changes and will not disappear.\n      // Listening to the input event wouldn't be necessary when the input is using the\n      // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n\n  }, {\n    key: \"_dirtyCheckPlaceholder\",\n    value: function _dirtyCheckPlaceholder() {\n      var _a, _b; // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n      // screen readers will read it out twice: once from the label and once from the attribute.\n      // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n      // the only one that supports promoting the placeholder to a label.\n\n\n      var placeholder = ((_b = (_a = this._formField) === null || _a === void 0 ? void 0 : _a._hideControlPlaceholder) === null || _b === void 0 ? void 0 : _b.call(_a)) ? null : this.placeholder;\n\n      if (placeholder !== this._previousPlaceholder) {\n        var element = this._elementRef.nativeElement;\n        this._previousPlaceholder = placeholder;\n        placeholder ? element.setAttribute('placeholder', placeholder) : element.removeAttribute('placeholder');\n      }\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n\n  }, {\n    key: \"_dirtyCheckNativeValue\",\n    value: function _dirtyCheckNativeValue() {\n      var newValue = this._elementRef.nativeElement.value;\n\n      if (this._previousNativeValue !== newValue) {\n        this._previousNativeValue = newValue;\n        this.stateChanges.next();\n      }\n    }\n    /** Make sure the input is a supported type. */\n\n  }, {\n    key: \"_validateType\",\n    value: function _validateType() {\n      if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatInputUnsupportedTypeError(this._type);\n      }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n\n  }, {\n    key: \"_isNeverEmpty\",\n    value: function _isNeverEmpty() {\n      return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n\n  }, {\n    key: \"_isBadInput\",\n    value: function _isBadInput() {\n      // The `validity` property won't be present on platform-server.\n      var validity = this._elementRef.nativeElement.validity;\n      return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"empty\",\n    get: function get() {\n      return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() && !this.autofilled;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"shouldLabelFloat\",\n    get: function get() {\n      if (this._isNativeSelect) {\n        // For a single-selection `<select>`, the label should float when the selected option has\n        // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n        // overlapping the label with the options.\n        var selectElement = this._elementRef.nativeElement;\n        var firstOption = selectElement.options[0]; // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n        // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n\n        return this.focused || selectElement.multiple || !this.empty || !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n      } else {\n        return this.focused || !this.empty;\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"setDescribedByIds\",\n    value: function setDescribedByIds(ids) {\n      if (ids.length) {\n        this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n      } else {\n        this._elementRef.nativeElement.removeAttribute('aria-describedby');\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"onContainerClick\",\n    value: function onContainerClick() {\n      // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n      // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n      // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n      if (!this.focused) {\n        this.focus();\n      }\n    }\n    /** Whether the form control is a native select that is displayed inline. */\n\n  }, {\n    key: \"_isInlineSelect\",\n    value: function _isInlineSelect() {\n      var element = this._elementRef.nativeElement;\n      return this._isNativeSelect && (element.multiple || element.size > 1);\n    }\n  }]);\n\n  return MatInput;\n}(_MatInputBase);\n\nMatInput.ɵfac = function MatInput_Factory(t) {\n  return new (t || MatInput)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(i2.NgControl, 10), i0.ɵɵdirectiveInject(i2.NgForm, 8), i0.ɵɵdirectiveInject(i2.FormGroupDirective, 8), i0.ɵɵdirectiveInject(i3.ErrorStateMatcher), i0.ɵɵdirectiveInject(MAT_INPUT_VALUE_ACCESSOR, 10), i0.ɵɵdirectiveInject(i4.AutofillMonitor), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8));\n};\n\nMatInput.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatInput,\n  selectors: [[\"input\", \"matInput\", \"\"], [\"textarea\", \"matInput\", \"\"], [\"select\", \"matNativeControl\", \"\"], [\"input\", \"matNativeControl\", \"\"], [\"textarea\", \"matNativeControl\", \"\"]],\n  hostAttrs: [1, \"mat-input-element\", \"mat-form-field-autofill-control\"],\n  hostVars: 12,\n  hostBindings: function MatInput_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"focus\", function MatInput_focus_HostBindingHandler() {\n        return ctx._focusChanged(true);\n      })(\"blur\", function MatInput_blur_HostBindingHandler() {\n        return ctx._focusChanged(false);\n      })(\"input\", function MatInput_input_HostBindingHandler() {\n        return ctx._onInput();\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n      i0.ɵɵattribute(\"id\", ctx.id)(\"data-placeholder\", ctx.placeholder)(\"name\", ctx.name || null)(\"readonly\", ctx.readonly && !ctx._isNativeSelect || null)(\"aria-invalid\", ctx.empty && ctx.required ? null : ctx.errorState)(\"aria-required\", ctx.required);\n      i0.ɵɵclassProp(\"mat-input-server\", ctx._isServer)(\"mat-native-select-inline\", ctx._isInlineSelect());\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    id: \"id\",\n    placeholder: \"placeholder\",\n    name: \"name\",\n    required: \"required\",\n    type: \"type\",\n    errorStateMatcher: \"errorStateMatcher\",\n    userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"],\n    value: \"value\",\n    readonly: \"readonly\"\n  },\n  exportAs: [\"matInput\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatInput\n  }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatInput, [{\n    type: Directive,\n    args: [{\n      selector: \"input[matInput], textarea[matInput], select[matNativeControl],\\n      input[matNativeControl], textarea[matNativeControl]\",\n      exportAs: 'matInput',\n      host: {\n        /**\n         * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n         */\n        'class': 'mat-input-element mat-form-field-autofill-control',\n        '[class.mat-input-server]': '_isServer',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        // At the time of writing, we have a lot of customer tests that look up the input based on its\n        // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n        // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n        '[attr.data-placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '[attr.name]': 'name || null',\n        '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n        '[class.mat-native-select-inline]': '_isInlineSelect()',\n        // Only mark the input as invalid for assistive technology if it has a value since the\n        // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n        '[attr.aria-invalid]': '(empty && required) ? null : errorState',\n        '[attr.aria-required]': 'required',\n        '(focus)': '_focusChanged(true)',\n        '(blur)': '_focusChanged(false)',\n        '(input)': '_onInput()'\n      },\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatInput\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.Platform\n    }, {\n      type: i2.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }, {\n      type: i2.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i2.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i3.ErrorStateMatcher\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }, {\n        type: Inject,\n        args: [MAT_INPUT_VALUE_ACCESSOR]\n      }]\n    }, {\n      type: i4.AutofillMonitor\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i5.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_FORM_FIELD]\n      }]\n    }];\n  }, {\n    disabled: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    userAriaDescribedBy: [{\n      type: Input,\n      args: ['aria-describedby']\n    }],\n    value: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatInputModule = /*#__PURE__*/_createClass(function MatInputModule() {\n  _classCallCheck(this, MatInputModule);\n});\n\nMatInputModule.ɵfac = function MatInputModule_Factory(t) {\n  return new (t || MatInputModule)();\n};\n\nMatInputModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatInputModule\n});\nMatInputModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [ErrorStateMatcher],\n  imports: [[TextFieldModule, MatFormFieldModule, MatCommonModule], TextFieldModule, // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n  // be used together with `MatFormField`.\n  MatFormFieldModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatInputModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [MatInput],\n      imports: [TextFieldModule, MatFormFieldModule, MatCommonModule],\n      exports: [TextFieldModule, // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n      // be used together with `MatFormField`.\n      MatFormFieldModule, MatInput],\n      providers: [ErrorStateMatcher]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, getMatInputUnsupportedTypeError };","map":{"version":3,"sources":["/Users/VIDIT/Desktop/recovery-project/node_modules/@angular/material/fesm2015/input.mjs"],"names":["coerceBooleanProperty","i1","getSupportedInputTypes","i0","InjectionToken","Directive","Optional","Self","Inject","Input","NgModule","i2","Validators","i3","mixinErrorState","MatCommonModule","ErrorStateMatcher","i5","MAT_FORM_FIELD","MatFormFieldControl","MatFormFieldModule","Subject","i4","TextFieldModule","getMatInputUnsupportedTypeError","type","Error","MAT_INPUT_VALUE_ACCESSOR","MAT_INPUT_INVALID_TYPES","nextUniqueId","_MatInputBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","MatInput","_elementRef","_platform","inputValueAccessor","_autofillMonitor","ngZone","_formField","_uid","focused","stateChanges","controlType","autofilled","_disabled","_type","_readonly","_neverEmptyInputTypes","filter","t","has","_iOSKeyupListener","event","el","target","value","selectionStart","selectionEnd","setSelectionRange","element","nativeElement","nodeName","toLowerCase","_inputValueAccessor","_previousNativeValue","id","IOS","runOutsideAngular","addEventListener","_isServer","isBrowser","_isNativeSelect","_isTextarea","_isInFormField","multiple","disabled","next","_id","_a","_b","_c","_d","_required","control","hasValidator","required","_validateType","monitor","subscribe","isAutofilled","complete","stopMonitoring","removeEventListener","updateErrorState","_dirtyCheckNativeValue","_dirtyCheckPlaceholder","options","focus","isFocused","placeholder","_hideControlPlaceholder","call","_previousPlaceholder","setAttribute","removeAttribute","newValue","indexOf","ngDevMode","validity","badInput","_isNeverEmpty","_isBadInput","selectElement","firstOption","empty","selectedIndex","label","ids","length","join","size","ɵfac","ElementRef","Platform","NgControl","NgForm","FormGroupDirective","AutofillMonitor","NgZone","ɵdir","provide","useExisting","args","selector","exportAs","host","providers","decorators","undefined","MatFormField","name","errorStateMatcher","userAriaDescribedBy","readonly","MatInputModule","ɵmod","ɵinj","declarations","imports","exports"],"mappings":"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","sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { getSupportedInputTypes } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Optional, Self, Inject, Input, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport * as i3 from '@angular/material/core';\nimport { mixinErrorState, MatCommonModule, ErrorStateMatcher } from '@angular/material/core';\nimport * as i5 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\nimport * as i4 from '@angular/cdk/text-field';\nimport { TextFieldModule } from '@angular/cdk/text-field';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit',\n];\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nconst _MatInputBase = mixinErrorState(class {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n});\n/** Directive that allows a native input to work inside a `MatFormField`. */\nclass MatInput extends _MatInputBase {\n    constructor(_elementRef, _platform, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, \n    // TODO: Remove this once the legacy appearance has been removed. We only need\n    // to inject the form-field for determining whether the placeholder has been promoted.\n    _formField) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._autofillMonitor = _autofillMonitor;\n        this._formField = _formField;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week',\n        ].filter(t => getSupportedInputTypes().has(t));\n        this._iOSKeyupListener = (event) => {\n            const el = event.target;\n            // Note: We specifically check for 0, rather than `!el.selectionStart`, because the two\n            // indicate different things. If the value is 0, it means that the caret is at the start\n            // of the input, whereas a value of `null` means that the input doesn't support\n            // manipulating the selection range. Inputs that don't support setting the selection range\n            // will throw an error so we want to avoid calling `setSelectionRange` on them. See:\n            // https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n            if (!el.value && el.selectionStart === 0 && el.selectionEnd === 0) {\n                // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                // `1, 1` fixes it for the first time that you type text and\n                // then hold delete. Toggling to `1, 1` and then back to\n                // `0, 0` seems to completely fix it.\n                el.setSelectionRange(1, 1);\n                el.setSelectionRange(0, 0);\n            }\n        };\n        const element = this._elementRef.nativeElement;\n        const nodeName = element.nodeName.toLowerCase();\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular(() => {\n                _elementRef.nativeElement.addEventListener('keyup', this._iOSKeyupListener);\n            });\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = nodeName === 'select';\n        this._isTextarea = nodeName === 'textarea';\n        this._isInFormField = !!_formField;\n        if (this._isNativeSelect) {\n            this.controlType = element.multiple\n                ? 'mat-native-select-multiple'\n                : 'mat-native-select';\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() {\n        var _a, _b, _c, _d;\n        return (_d = (_a = this._required) !== null && _a !== void 0 ? _a : (_c = (_b = this.ngControl) === null || _b === void 0 ? void 0 : _b.control) === null || _c === void 0 ? void 0 : _c.hasValidator(Validators.required)) !== null && _d !== void 0 ? _d : false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /** Input type of the element. */\n    get type() {\n        return this._type;\n    }\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() {\n        return this._inputValueAccessor.value;\n    }\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /** Whether the element is readonly. */\n    get readonly() {\n        return this._readonly;\n    }\n    set readonly(value) {\n        this._readonly = coerceBooleanProperty(value);\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n        if (this._platform.IOS) {\n            this._elementRef.nativeElement.removeEventListener('keyup', this._iOSKeyupListener);\n        }\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n        // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n        // present or not depends on a query which is prone to \"changed after checked\" errors.\n        this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    _dirtyCheckPlaceholder() {\n        var _a, _b;\n        // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n        // screen readers will read it out twice: once from the label and once from the attribute.\n        // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n        // the only one that supports promoting the placeholder to a label.\n        const placeholder = ((_b = (_a = this._formField) === null || _a === void 0 ? void 0 : _a._hideControlPlaceholder) === null || _b === void 0 ? void 0 : _b.call(_a)) ? null : this.placeholder;\n        if (placeholder !== this._previousPlaceholder) {\n            const element = this._elementRef.nativeElement;\n            this._previousPlaceholder = placeholder;\n            placeholder\n                ? element.setAttribute('placeholder', placeholder)\n                : element.removeAttribute('placeholder');\n        }\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n    _dirtyCheckNativeValue() {\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /** Make sure the input is a supported type. */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        let validity = this._elementRef.nativeElement.validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._isNeverEmpty() &&\n            !this._elementRef.nativeElement.value &&\n            !this._isBadInput() &&\n            !this.autofilled);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            const selectElement = this._elementRef.nativeElement;\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return (this.focused ||\n                selectElement.multiple ||\n                !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label));\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n    /** Whether the form control is a native select that is displayed inline. */\n    _isInlineSelect() {\n        const element = this._elementRef.nativeElement;\n        return this._isNativeSelect && (element.multiple || element.size > 1);\n    }\n}\nMatInput.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatInput, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: i2.NgControl, optional: true, self: true }, { token: i2.NgForm, optional: true }, { token: i2.FormGroupDirective, optional: true }, { token: i3.ErrorStateMatcher }, { token: MAT_INPUT_VALUE_ACCESSOR, optional: true, self: true }, { token: i4.AutofillMonitor }, { token: i0.NgZone }, { token: MAT_FORM_FIELD, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatInput.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],\\n      input[matNativeControl], textarea[matNativeControl]\", inputs: { disabled: \"disabled\", id: \"id\", placeholder: \"placeholder\", name: \"name\", required: \"required\", type: \"type\", errorStateMatcher: \"errorStateMatcher\", userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], value: \"value\", readonly: \"readonly\" }, host: { listeners: { \"focus\": \"_focusChanged(true)\", \"blur\": \"_focusChanged(false)\", \"input\": \"_onInput()\" }, properties: { \"class.mat-input-server\": \"_isServer\", \"attr.id\": \"id\", \"attr.data-placeholder\": \"placeholder\", \"disabled\": \"disabled\", \"required\": \"required\", \"attr.name\": \"name || null\", \"attr.readonly\": \"readonly && !_isNativeSelect || null\", \"class.mat-native-select-inline\": \"_isInlineSelect()\", \"attr.aria-invalid\": \"(empty && required) ? null : errorState\", \"attr.aria-required\": \"required\" }, classAttribute: \"mat-input-element mat-form-field-autofill-control\" }, providers: [{ provide: MatFormFieldControl, useExisting: MatInput }], exportAs: [\"matInput\"], usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatInput, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                    exportAs: 'matInput',\n                    host: {\n                        /**\n                         * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                         */\n                        'class': 'mat-input-element mat-form-field-autofill-control',\n                        '[class.mat-input-server]': '_isServer',\n                        // Native input properties that are overwritten by Angular inputs need to be synced with\n                        // the native input element. Otherwise property bindings for those don't work.\n                        '[attr.id]': 'id',\n                        // At the time of writing, we have a lot of customer tests that look up the input based on its\n                        // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n                        // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n                        '[attr.data-placeholder]': 'placeholder',\n                        '[disabled]': 'disabled',\n                        '[required]': 'required',\n                        '[attr.name]': 'name || null',\n                        '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                        '[class.mat-native-select-inline]': '_isInlineSelect()',\n                        // Only mark the input as invalid for assistive technology if it has a value since the\n                        // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n                        '[attr.aria-invalid]': '(empty && required) ? null : errorState',\n                        '[attr.aria-required]': 'required',\n                        '(focus)': '_focusChanged(true)',\n                        '(blur)': '_focusChanged(false)',\n                        '(input)': '_onInput()',\n                    },\n                    providers: [{ provide: MatFormFieldControl, useExisting: MatInput }],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.Platform }, { type: i2.NgControl, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Self\n                    }] }, { type: i2.NgForm, decorators: [{\n                        type: Optional\n                    }] }, { type: i2.FormGroupDirective, decorators: [{\n                        type: Optional\n                    }] }, { type: i3.ErrorStateMatcher }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Self\n                    }, {\n                        type: Inject,\n                        args: [MAT_INPUT_VALUE_ACCESSOR]\n                    }] }, { type: i4.AutofillMonitor }, { type: i0.NgZone }, { type: i5.MatFormField, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_FORM_FIELD]\n                    }] }];\n    }, propDecorators: { disabled: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], errorStateMatcher: [{\n                type: Input\n            }], userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], value: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatInputModule {\n}\nMatInputModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatInputModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatInputModule, declarations: [MatInput], imports: [TextFieldModule, MatFormFieldModule, MatCommonModule], exports: [TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule,\n        MatInput] });\nMatInputModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatInputModule, providers: [ErrorStateMatcher], imports: [[TextFieldModule, MatFormFieldModule, MatCommonModule], TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatInputModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [MatInput],\n                    imports: [TextFieldModule, MatFormFieldModule, MatCommonModule],\n                    exports: [\n                        TextFieldModule,\n                        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n                        // be used together with `MatFormField`.\n                        MatFormFieldModule,\n                        MatInput,\n                    ],\n                    providers: [ErrorStateMatcher],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, getMatInputUnsupportedTypeError };\n"]},"metadata":{},"sourceType":"module"}