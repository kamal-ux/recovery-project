{"ast":null,"code":"import _get from \"/Users/VIDIT/Desktop/recovery-project/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/VIDIT/Desktop/recovery-project/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _toConsumableArray from \"/Users/VIDIT/Desktop/recovery-project/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _assertThisInitialized from \"/Users/VIDIT/Desktop/recovery-project/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/VIDIT/Desktop/recovery-project/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/VIDIT/Desktop/recovery-project/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createClass from \"/Users/VIDIT/Desktop/recovery-project/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/VIDIT/Desktop/recovery-project/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport * as i7 from '@angular/cdk/overlay';\nimport { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i8 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, EventEmitter, Optional, Inject, Self, Attribute, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/cdk/a11y';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport * as i4 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\nimport * as i3 from '@angular/cdk/bidi';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\n\nvar _c0 = [\"trigger\"];\nvar _c1 = [\"panel\"];\n\nfunction MatSelect_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.placeholder);\n  }\n}\n\nfunction MatSelect_span_5_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r5.triggerValue);\n  }\n}\n\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n  }\n}\n\nfunction MatSelect_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 9);\n    i0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    i0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngSwitchCase\", true);\n  }\n}\n\nfunction MatSelect_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"div\", 14, 15);\n    i0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      var ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8._panelDoneAnimatingStream.next($event.toState);\n    })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_1_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      var ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10._handleKeydown($event);\n    });\n    i0.ɵɵprojection(3, 1);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@transformPanelWrap\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    i0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n    i0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\")(\"aria-multiselectable\", ctx_r4.multiple)(\"aria-label\", ctx_r4.ariaLabel || null)(\"aria-labelledby\", ctx_r4._getPanelAriaLabelledby());\n  }\n}\n\nvar _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nvar _c3 = [\"mat-select-trigger\", \"*\"];\nvar matSelectAnimations = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [transition('* => void', query('@transformPanel', [animateChild()], {\n    optional: true\n  }))]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [state('void', style({\n    transform: 'scaleY(0.8)',\n    minWidth: '100%',\n    opacity: 0\n  })), state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)',\n    transform: 'scaleY(1)'\n  })), state('showing-multiple', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)',\n    transform: 'scaleY(1)'\n  })), transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')), transition('* => void', animate('100ms 25ms linear', style({\n    opacity: 0\n  })))])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\n\nfunction getMatSelectDynamicMultipleError() {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\n\n\nfunction getMatSelectNonArrayValueError() {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\n\n\nfunction getMatSelectNonFunctionValueError() {\n  return Error('`compareWith` must be a function.');\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel. */\n\nvar SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis. */\n\nvar SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\n\nvar SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** The height of the select items in `em` units. */\n\nvar SELECT_ITEM_HEIGHT_EM = 3; // TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\n\nvar SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\n\nvar SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\n\nvar MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition();\n  };\n}\n/** Injection token that can be used to provide the default options the select module. */\n\n\nvar MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\n\nvar MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/** Change event object that is emitted when the select value has changed. */\n\nvar MatSelectChange = /*#__PURE__*/_createClass(function MatSelectChange(\n/** Reference to the select that emitted the change event. */\nsource,\n/** Current value of the select that emitted the event. */\nvalue) {\n  _classCallCheck(this, MatSelectChange);\n\n  this.source = source;\n  this.value = value;\n}); // Boilerplate for applying mixins to MatSelect.\n\n/** @docs-private */\n\n\nvar _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState( /*#__PURE__*/function () {\n  function _class(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n    _classCallCheck(this, _class);\n\n    this._elementRef = _elementRef;\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n\n  return _createClass(_class);\n}()))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nvar MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n\nvar MatSelectTrigger = /*#__PURE__*/_createClass(function MatSelectTrigger() {\n  _classCallCheck(this, MatSelectTrigger);\n});\n\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) {\n  return new (t || MatSelectTrigger)();\n};\n\nMatSelectTrigger.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatSelectTrigger,\n  selectors: [[\"mat-select-trigger\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_SELECT_TRIGGER,\n    useExisting: MatSelectTrigger\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSelectTrigger, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-select-trigger',\n      providers: [{\n        provide: MAT_SELECT_TRIGGER,\n        useExisting: MatSelectTrigger\n      }]\n    }]\n  }], null, null);\n})();\n/** Base class with all of the `MatSelect` functionality. */\n\n\nvar _MatSelectBase = /*#__PURE__*/function (_MatSelectMixinBase2) {\n  _inherits(_MatSelectBase, _MatSelectMixinBase2);\n\n  var _super = _createSuper(_MatSelectBase);\n\n  function _MatSelectBase(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n    var _this;\n\n    _classCallCheck(this, _MatSelectBase);\n\n    var _a, _b, _c;\n\n    _this = _super.call(this, elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    _this._viewportRuler = _viewportRuler;\n    _this._changeDetectorRef = _changeDetectorRef;\n    _this._ngZone = _ngZone;\n    _this._dir = _dir;\n    _this._parentFormField = _parentFormField;\n    _this._liveAnnouncer = _liveAnnouncer;\n    _this._defaultOptions = _defaultOptions;\n    /** Whether or not the overlay panel is open. */\n\n    _this._panelOpen = false;\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n\n    _this._compareWith = function (o1, o2) {\n      return o1 === o2;\n    };\n    /** Unique id for this input. */\n\n\n    _this._uid = \"mat-select-\".concat(nextUniqueId++);\n    /** Current `ariar-labelledby` value for the select trigger. */\n\n    _this._triggerAriaLabelledBy = null;\n    /** Emits whenever the component is destroyed. */\n\n    _this._destroy = new Subject();\n    /** `View -> model callback called when value changes` */\n\n    _this._onChange = function () {};\n    /** `View -> model callback called when select has been touched` */\n\n\n    _this._onTouched = function () {};\n    /** ID for the DOM node containing the select's value. */\n\n\n    _this._valueId = \"mat-select-value-\".concat(nextUniqueId++);\n    /** Emits when the panel element is finished transforming in. */\n\n    _this._panelDoneAnimatingStream = new Subject();\n    _this._overlayPanelClass = ((_a = _this._defaultOptions) === null || _a === void 0 ? void 0 : _a.overlayPanelClass) || '';\n    _this._focused = false;\n    /** A name for this control that can be used by `mat-form-field`. */\n\n    _this.controlType = 'mat-select';\n    _this._multiple = false;\n    _this._disableOptionCentering = (_c = (_b = _this._defaultOptions) === null || _b === void 0 ? void 0 : _b.disableOptionCentering) !== null && _c !== void 0 ? _c : false;\n    /** Aria label of the select. */\n\n    _this.ariaLabel = '';\n    /** Combined stream of all of the child options' change events. */\n\n    _this.optionSelectionChanges = defer(function () {\n      var options = _this.options;\n\n      if (options) {\n        return options.changes.pipe(startWith(options), switchMap(function () {\n          return merge.apply(void 0, _toConsumableArray(options.map(function (option) {\n            return option.onSelectionChange;\n          })));\n        }));\n      }\n\n      return _this._ngZone.onStable.pipe(take(1), switchMap(function () {\n        return _this.optionSelectionChanges;\n      }));\n    });\n    /** Event emitted when the select panel has been toggled. */\n\n    _this.openedChange = new EventEmitter();\n    /** Event emitted when the select has been opened. */\n\n    _this._openedStream = _this.openedChange.pipe(filter(function (o) {\n      return o;\n    }), map(function () {}));\n    /** Event emitted when the select has been closed. */\n\n    _this._closedStream = _this.openedChange.pipe(filter(function (o) {\n      return !o;\n    }), map(function () {}));\n    /** Event emitted when the selected value has been changed by the user. */\n\n    _this.selectionChange = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n\n    _this.valueChange = new EventEmitter();\n\n    if (_this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      _this.ngControl.valueAccessor = _assertThisInitialized(_this);\n    } // Note that we only want to set this when the defaults pass it in, otherwise it should\n    // stay as `undefined` so that it falls back to the default in the key manager.\n\n\n    if ((_defaultOptions === null || _defaultOptions === void 0 ? void 0 : _defaultOptions.typeaheadDebounceInterval) != null) {\n      _this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n    }\n\n    _this._scrollStrategyFactory = scrollStrategyFactory;\n    _this._scrollStrategy = _this._scrollStrategyFactory();\n    _this.tabIndex = parseInt(tabIndex) || 0; // Force setter to be called in case id was not specified.\n\n    _this.id = _this.id;\n    return _this;\n  }\n  /** Whether the select is focused. */\n\n\n  _createClass(_MatSelectBase, [{\n    key: \"focused\",\n    get: function get() {\n      return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n\n  }, {\n    key: \"placeholder\",\n    get: function get() {\n      return this._placeholder;\n    },\n    set: function set(value) {\n      this._placeholder = value;\n      this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n\n  }, {\n    key: \"required\",\n    get: function get() {\n      var _a, _b, _c, _d;\n\n      return (_d = (_a = this._required) !== null && _a !== void 0 ? _a : (_c = (_b = this.ngControl) === null || _b === void 0 ? void 0 : _b.control) === null || _c === void 0 ? void 0 : _c.hasValidator(Validators.required)) !== null && _d !== void 0 ? _d : false;\n    },\n    set: function set(value) {\n      this._required = coerceBooleanProperty(value);\n      this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n\n  }, {\n    key: \"multiple\",\n    get: function get() {\n      return this._multiple;\n    },\n    set: function set(value) {\n      if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatSelectDynamicMultipleError();\n      }\n\n      this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n\n  }, {\n    key: \"disableOptionCentering\",\n    get: function get() {\n      return this._disableOptionCentering;\n    },\n    set: function set(value) {\n      this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n\n  }, {\n    key: \"compareWith\",\n    get: function get() {\n      return this._compareWith;\n    },\n    set: function set(fn) {\n      if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatSelectNonFunctionValueError();\n      }\n\n      this._compareWith = fn;\n\n      if (this._selectionModel) {\n        // A different comparator means the selection could change.\n        this._initializeSelection();\n      }\n    }\n    /** Value of the select control. */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    },\n    set: function set(newValue) {\n      var hasAssigned = this._assignValue(newValue);\n\n      if (hasAssigned) {\n        this._onChange(newValue);\n      }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n\n  }, {\n    key: \"typeaheadDebounceInterval\",\n    get: function get() {\n      return this._typeaheadDebounceInterval;\n    },\n    set: function set(value) {\n      this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._id;\n    },\n    set: function set(value) {\n      this._id = value || this._uid;\n      this.stateChanges.next();\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this2 = this;\n\n      this._selectionModel = new SelectionModel(this.multiple);\n      this.stateChanges.next(); // We need `distinctUntilChanged` here, because some browsers will\n      // fire the animation end event twice for the same animation. See:\n      // https://github.com/angular/angular/issues/24084\n\n      this._panelDoneAnimatingStream.pipe(distinctUntilChanged(), takeUntil(this._destroy)).subscribe(function () {\n        return _this2._panelDoneAnimating(_this2.panelOpen);\n      });\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this3 = this;\n\n      this._initKeyManager();\n\n      this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(function (event) {\n        event.added.forEach(function (option) {\n          return option.select();\n        });\n        event.removed.forEach(function (option) {\n          return option.deselect();\n        });\n      });\n\n      this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(function () {\n        _this3._resetOptions();\n\n        _this3._initializeSelection();\n      });\n    }\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      var newAriaLabelledby = this._getTriggerAriaLabelledby();\n\n      var ngControl = this.ngControl; // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n      // is computed as a result of a content query which can cause this binding to trigger a\n      // \"changed after checked\" error.\n\n      if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n        var element = this._elementRef.nativeElement;\n        this._triggerAriaLabelledBy = newAriaLabelledby;\n\n        if (newAriaLabelledby) {\n          element.setAttribute('aria-labelledby', newAriaLabelledby);\n        } else {\n          element.removeAttribute('aria-labelledby');\n        }\n      }\n\n      if (ngControl) {\n        // The disabled state might go out of sync if the form group is swapped out. See #17860.\n        if (this._previousControl !== ngControl.control) {\n          if (this._previousControl !== undefined && ngControl.disabled !== null && ngControl.disabled !== this.disabled) {\n            this.disabled = ngControl.disabled;\n          }\n\n          this._previousControl = ngControl.control;\n        }\n\n        this.updateErrorState();\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n      // the parent form field know to run change detection when the disabled state changes.\n      if (changes['disabled']) {\n        this.stateChanges.next();\n      }\n\n      if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n        this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroy.next();\n\n      this._destroy.complete();\n\n      this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      if (this._canOpen()) {\n        this._panelOpen = true;\n\n        this._keyManager.withHorizontalOrientation(null);\n\n        this._highlightCorrectOption();\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /** Closes the overlay panel and focuses the host element. */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this._panelOpen) {\n        this._panelOpen = false;\n\n        this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n        this._changeDetectorRef.markForCheck();\n\n        this._onTouched();\n      }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this._assignValue(value);\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n\n      this._changeDetectorRef.markForCheck();\n\n      this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n\n  }, {\n    key: \"panelOpen\",\n    get: function get() {\n      return this._panelOpen;\n    }\n    /** The currently selected option. */\n\n  }, {\n    key: \"selected\",\n    get: function get() {\n      var _a, _b;\n\n      return this.multiple ? ((_a = this._selectionModel) === null || _a === void 0 ? void 0 : _a.selected) || [] : (_b = this._selectionModel) === null || _b === void 0 ? void 0 : _b.selected[0];\n    }\n    /** The value displayed in the trigger. */\n\n  }, {\n    key: \"triggerValue\",\n    get: function get() {\n      if (this.empty) {\n        return '';\n      }\n\n      if (this._multiple) {\n        var selectedOptions = this._selectionModel.selected.map(function (option) {\n          return option.viewValue;\n        });\n\n        if (this._isRtl()) {\n          selectedOptions.reverse();\n        } // TODO(crisbeto): delimiter should be configurable for proper localization.\n\n\n        return selectedOptions.join(', ');\n      }\n\n      return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n\n  }, {\n    key: \"_isRtl\",\n    value: function _isRtl() {\n      return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n\n  }, {\n    key: \"_handleKeydown\",\n    value: function _handleKeydown(event) {\n      if (!this.disabled) {\n        this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n      }\n    }\n    /** Handles keyboard events while the select is closed. */\n\n  }, {\n    key: \"_handleClosedKeydown\",\n    value: function _handleClosedKeydown(event) {\n      var keyCode = event.keyCode;\n      var isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n      var isOpenKey = keyCode === ENTER || keyCode === SPACE;\n      var manager = this._keyManager; // Open the select on ALT + arrow key to match the native <select>\n\n      if (!manager.isTyping() && isOpenKey && !hasModifierKey(event) || (this.multiple || event.altKey) && isArrowKey) {\n        event.preventDefault(); // prevents the page from scrolling down when pressing space\n\n        this.open();\n      } else if (!this.multiple) {\n        var previouslySelectedOption = this.selected;\n        manager.onKeydown(event);\n        var selectedOption = this.selected; // Since the value has changed, we need to announce it ourselves.\n\n        if (selectedOption && previouslySelectedOption !== selectedOption) {\n          // We set a duration on the live announcement, because we want the live element to be\n          // cleared after a while so that users can't navigate to it using the arrow keys.\n          this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n        }\n      }\n    }\n    /** Handles keyboard events when the selected is open. */\n\n  }, {\n    key: \"_handleOpenKeydown\",\n    value: function _handleOpenKeydown(event) {\n      var manager = this._keyManager;\n      var keyCode = event.keyCode;\n      var isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n      var isTyping = manager.isTyping();\n\n      if (isArrowKey && event.altKey) {\n        // Close the select on ALT + arrow key to match the native <select>\n        event.preventDefault();\n        this.close(); // Don't do anything in this case if the user is typing,\n        // because the typing sequence can include the space key.\n      } else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem && !hasModifierKey(event)) {\n        event.preventDefault();\n\n        manager.activeItem._selectViaInteraction();\n      } else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n        event.preventDefault();\n        var hasDeselectedOptions = this.options.some(function (opt) {\n          return !opt.disabled && !opt.selected;\n        });\n        this.options.forEach(function (option) {\n          if (!option.disabled) {\n            hasDeselectedOptions ? option.select() : option.deselect();\n          }\n        });\n      } else {\n        var previouslyFocusedIndex = manager.activeItemIndex;\n        manager.onKeydown(event);\n\n        if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem && manager.activeItemIndex !== previouslyFocusedIndex) {\n          manager.activeItem._selectViaInteraction();\n        }\n      }\n    }\n  }, {\n    key: \"_onFocus\",\n    value: function _onFocus() {\n      if (!this.disabled) {\n        this._focused = true;\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n\n  }, {\n    key: \"_onBlur\",\n    value: function _onBlur() {\n      this._focused = false;\n\n      if (!this.disabled && !this.panelOpen) {\n        this._onTouched();\n\n        this._changeDetectorRef.markForCheck();\n\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n\n  }, {\n    key: \"_onAttached\",\n    value: function _onAttached() {\n      var _this4 = this;\n\n      this._overlayDir.positionChange.pipe(take(1)).subscribe(function () {\n        _this4._changeDetectorRef.detectChanges();\n\n        _this4._positioningSettled();\n      });\n    }\n    /** Returns the theme to be used on the panel. */\n\n  }, {\n    key: \"_getPanelTheme\",\n    value: function _getPanelTheme() {\n      return this._parentFormField ? \"mat-\".concat(this._parentFormField.color) : '';\n    }\n    /** Whether the select has a value. */\n\n  }, {\n    key: \"empty\",\n    get: function get() {\n      return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n  }, {\n    key: \"_initializeSelection\",\n    value: function _initializeSelection() {\n      var _this5 = this;\n\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(function () {\n        if (_this5.ngControl) {\n          _this5._value = _this5.ngControl.value;\n        }\n\n        _this5._setSelectionByValue(_this5._value);\n\n        _this5.stateChanges.next();\n      });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n\n  }, {\n    key: \"_setSelectionByValue\",\n    value: function _setSelectionByValue(value) {\n      var _this6 = this;\n\n      this._selectionModel.selected.forEach(function (option) {\n        return option.setInactiveStyles();\n      });\n\n      this._selectionModel.clear();\n\n      if (this.multiple && value) {\n        if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getMatSelectNonArrayValueError();\n        }\n\n        value.forEach(function (currentValue) {\n          return _this6._selectOptionByValue(currentValue);\n        });\n\n        this._sortValues();\n      } else {\n        var correspondingOption = this._selectOptionByValue(value); // Shift focus to the active item. Note that we shouldn't do this in multiple\n        // mode, because we don't know what option the user interacted with last.\n\n\n        if (correspondingOption) {\n          this._keyManager.updateActiveItem(correspondingOption);\n        } else if (!this.panelOpen) {\n          // Otherwise reset the highlighted option. Note that we only want to do this while\n          // closed, because doing it while open can shift the user's focus unnecessarily.\n          this._keyManager.updateActiveItem(-1);\n        }\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n\n  }, {\n    key: \"_selectOptionByValue\",\n    value: function _selectOptionByValue(value) {\n      var _this7 = this;\n\n      var correspondingOption = this.options.find(function (option) {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (_this7._selectionModel.isSelected(option)) {\n          return false;\n        }\n\n        try {\n          // Treat null as a special reset value.\n          return option.value != null && _this7._compareWith(option.value, value);\n        } catch (error) {\n          if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            // Notify developers of errors in their comparator.\n            console.warn(error);\n          }\n\n          return false;\n        }\n      });\n\n      if (correspondingOption) {\n        this._selectionModel.select(correspondingOption);\n      }\n\n      return correspondingOption;\n    }\n    /** Assigns a specific value to the select. Returns whether the value has changed. */\n\n  }, {\n    key: \"_assignValue\",\n    value: function _assignValue(newValue) {\n      // Always re-assign an array, because it might have been mutated.\n      if (newValue !== this._value || this._multiple && Array.isArray(newValue)) {\n        if (this.options) {\n          this._setSelectionByValue(newValue);\n        }\n\n        this._value = newValue;\n        return true;\n      }\n\n      return false;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n\n  }, {\n    key: \"_initKeyManager\",\n    value: function _initKeyManager() {\n      var _this8 = this;\n\n      this._keyManager = new ActiveDescendantKeyManager(this.options).withTypeAhead(this._typeaheadDebounceInterval).withVerticalOrientation().withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr').withHomeAndEnd().withAllowedModifierKeys(['shiftKey']);\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(function () {\n        if (_this8.panelOpen) {\n          // Select the active item when tabbing away. This is consistent with how the native\n          // select behaves. Note that we only want to do this in single selection mode.\n          if (!_this8.multiple && _this8._keyManager.activeItem) {\n            _this8._keyManager.activeItem._selectViaInteraction();\n          } // Restore focus to the trigger before closing. Ensures that the focus\n          // position won't be lost if the user got focus into the overlay.\n\n\n          _this8.focus();\n\n          _this8.close();\n        }\n      });\n\n      this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(function () {\n        if (_this8._panelOpen && _this8.panel) {\n          _this8._scrollOptionIntoView(_this8._keyManager.activeItemIndex || 0);\n        } else if (!_this8._panelOpen && !_this8.multiple && _this8._keyManager.activeItem) {\n          _this8._keyManager.activeItem._selectViaInteraction();\n        }\n      });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n\n  }, {\n    key: \"_resetOptions\",\n    value: function _resetOptions() {\n      var _this9 = this;\n\n      var changedOrDestroyed = merge(this.options.changes, this._destroy);\n      this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(function (event) {\n        _this9._onSelect(event.source, event.isUserInput);\n\n        if (event.isUserInput && !_this9.multiple && _this9._panelOpen) {\n          _this9.close();\n\n          _this9.focus();\n        }\n      }); // Listen to changes in the internal state of the options and react accordingly.\n      // Handles cases like the labels of the selected options changing.\n\n      merge.apply(void 0, _toConsumableArray(this.options.map(function (option) {\n        return option._stateChanges;\n      }))).pipe(takeUntil(changedOrDestroyed)).subscribe(function () {\n        _this9._changeDetectorRef.markForCheck();\n\n        _this9.stateChanges.next();\n      });\n    }\n    /** Invoked when an option is clicked. */\n\n  }, {\n    key: \"_onSelect\",\n    value: function _onSelect(option, isUserInput) {\n      var wasSelected = this._selectionModel.isSelected(option);\n\n      if (option.value == null && !this._multiple) {\n        option.deselect();\n\n        this._selectionModel.clear();\n\n        if (this.value != null) {\n          this._propagateChanges(option.value);\n        }\n      } else {\n        if (wasSelected !== option.selected) {\n          option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n        }\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(option);\n        }\n\n        if (this.multiple) {\n          this._sortValues();\n\n          if (isUserInput) {\n            // In case the user selected the option with their mouse, we\n            // want to restore focus back to the trigger, in order to\n            // prevent the select keyboard controls from clashing with\n            // the ones from `mat-option`.\n            this.focus();\n          }\n        }\n      }\n\n      if (wasSelected !== this._selectionModel.isSelected(option)) {\n        this._propagateChanges();\n      }\n\n      this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n\n  }, {\n    key: \"_sortValues\",\n    value: function _sortValues() {\n      var _this10 = this;\n\n      if (this.multiple) {\n        var options = this.options.toArray();\n\n        this._selectionModel.sort(function (a, b) {\n          return _this10.sortComparator ? _this10.sortComparator(a, b, options) : options.indexOf(a) - options.indexOf(b);\n        });\n\n        this.stateChanges.next();\n      }\n    }\n    /** Emits change event to set the model value. */\n\n  }, {\n    key: \"_propagateChanges\",\n    value: function _propagateChanges(fallbackValue) {\n      var valueToEmit = null;\n\n      if (this.multiple) {\n        valueToEmit = this.selected.map(function (option) {\n          return option.value;\n        });\n      } else {\n        valueToEmit = this.selected ? this.selected.value : fallbackValue;\n      }\n\n      this._value = valueToEmit;\n      this.valueChange.emit(valueToEmit);\n\n      this._onChange(valueToEmit);\n\n      this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n\n  }, {\n    key: \"_highlightCorrectOption\",\n    value: function _highlightCorrectOption() {\n      if (this._keyManager) {\n        if (this.empty) {\n          this._keyManager.setFirstItemActive();\n        } else {\n          this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n        }\n      }\n    }\n    /** Whether the panel is allowed to open. */\n\n  }, {\n    key: \"_canOpen\",\n    value: function _canOpen() {\n      var _a;\n\n      return !this._panelOpen && !this.disabled && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    /** Focuses the select element. */\n\n  }, {\n    key: \"focus\",\n    value: function focus(options) {\n      this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n\n  }, {\n    key: \"_getPanelAriaLabelledby\",\n    value: function _getPanelAriaLabelledby() {\n      var _a;\n\n      if (this.ariaLabel) {\n        return null;\n      }\n\n      var labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n      var labelExpression = labelId ? labelId + ' ' : '';\n      return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n\n  }, {\n    key: \"_getAriaActiveDescendant\",\n    value: function _getAriaActiveDescendant() {\n      if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n        return this._keyManager.activeItem.id;\n      }\n\n      return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n\n  }, {\n    key: \"_getTriggerAriaLabelledby\",\n    value: function _getTriggerAriaLabelledby() {\n      var _a;\n\n      if (this.ariaLabel) {\n        return null;\n      }\n\n      var labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n      var value = (labelId ? labelId + ' ' : '') + this._valueId;\n\n      if (this.ariaLabelledby) {\n        value += ' ' + this.ariaLabelledby;\n      }\n\n      return value;\n    }\n    /** Called when the overlay panel is done animating. */\n\n  }, {\n    key: \"_panelDoneAnimating\",\n    value: function _panelDoneAnimating(isOpen) {\n      this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"setDescribedByIds\",\n    value: function setDescribedByIds(ids) {\n      this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"onContainerClick\",\n    value: function onContainerClick() {\n      this.focus();\n      this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n  }, {\n    key: \"shouldLabelFloat\",\n    get: function get() {\n      return this._panelOpen || !this.empty || this._focused && !!this._placeholder;\n    }\n  }]);\n\n  return _MatSelectBase;\n}(_MatSelectMixinBase);\n\n_MatSelectBase.ɵfac = function _MatSelectBase_Factory(t) {\n  return new (t || _MatSelectBase)(i0.ɵɵdirectiveInject(i1.ViewportRuler), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.ErrorStateMatcher), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i3.Directionality, 8), i0.ɵɵdirectiveInject(i4.NgForm, 8), i0.ɵɵdirectiveInject(i4.FormGroupDirective, 8), i0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8), i0.ɵɵdirectiveInject(i4.NgControl, 10), i0.ɵɵinjectAttribute('tabindex'), i0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), i0.ɵɵdirectiveInject(i5.LiveAnnouncer), i0.ɵɵdirectiveInject(MAT_SELECT_CONFIG, 8));\n};\n\n_MatSelectBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatSelectBase,\n  viewQuery: function _MatSelectBase_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n      i0.ɵɵviewQuery(_c1, 5);\n      i0.ɵɵviewQuery(CdkConnectedOverlay, 5);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._overlayDir = _t.first);\n    }\n  },\n  inputs: {\n    panelClass: \"panelClass\",\n    placeholder: \"placeholder\",\n    required: \"required\",\n    multiple: \"multiple\",\n    disableOptionCentering: \"disableOptionCentering\",\n    compareWith: \"compareWith\",\n    value: \"value\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    errorStateMatcher: \"errorStateMatcher\",\n    typeaheadDebounceInterval: \"typeaheadDebounceInterval\",\n    sortComparator: \"sortComparator\",\n    id: \"id\"\n  },\n  outputs: {\n    openedChange: \"openedChange\",\n    _openedStream: \"opened\",\n    _closedStream: \"closed\",\n    selectionChange: \"selectionChange\",\n    valueChange: \"valueChange\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatSelectBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i1.ViewportRuler\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i2.ErrorStateMatcher\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i4.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i4.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i6.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_FORM_FIELD]\n      }]\n    }, {\n      type: i4.NgControl,\n      decorators: [{\n        type: Self\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SELECT_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: i5.LiveAnnouncer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_SELECT_CONFIG]\n      }]\n    }];\n  }, {\n    trigger: [{\n      type: ViewChild,\n      args: ['trigger']\n    }],\n    panel: [{\n      type: ViewChild,\n      args: ['panel']\n    }],\n    _overlayDir: [{\n      type: ViewChild,\n      args: [CdkConnectedOverlay]\n    }],\n    panelClass: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    multiple: [{\n      type: Input\n    }],\n    disableOptionCentering: [{\n      type: Input\n    }],\n    compareWith: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    typeaheadDebounceInterval: [{\n      type: Input\n    }],\n    sortComparator: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    openedChange: [{\n      type: Output\n    }],\n    _openedStream: [{\n      type: Output,\n      args: ['opened']\n    }],\n    _closedStream: [{\n      type: Output,\n      args: ['closed']\n    }],\n    selectionChange: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }]\n  });\n})();\n\nvar MatSelect = /*#__PURE__*/function (_MatSelectBase2) {\n  _inherits(MatSelect, _MatSelectBase2);\n\n  var _super2 = _createSuper(MatSelect);\n\n  function MatSelect() {\n    var _this11;\n\n    _classCallCheck(this, MatSelect);\n\n    _this11 = _super2.apply(this, arguments);\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n\n    _this11._scrollTop = 0;\n    /** The cached font-size of the trigger element. */\n\n    _this11._triggerFontSize = 0;\n    /** The value of the select panel's transform-origin property. */\n\n    _this11._transformOrigin = 'top';\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n\n    _this11._offsetY = 0;\n    _this11._positions = [{\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top'\n    }, {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom'\n    }];\n    return _this11;\n  }\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n\n\n  _createClass(MatSelect, [{\n    key: \"_calculateOverlayScroll\",\n    value: function _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n      var itemHeight = this._getItemHeight();\n\n      var optionOffsetFromScrollTop = itemHeight * selectedIndex;\n      var halfOptionHeight = itemHeight / 2; // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n      // scroll container, then subtracts the scroll buffer to scroll the option down to\n      // the center of the overlay panel. Half the option height must be re-added to the\n      // scrollTop so the option is centered based on its middle, not its top edge.\n\n      var optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n      return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this12 = this;\n\n      _get(_getPrototypeOf(MatSelect.prototype), \"ngOnInit\", this).call(this);\n\n      this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(function () {\n        if (_this12.panelOpen) {\n          _this12._triggerRect = _this12.trigger.nativeElement.getBoundingClientRect();\n\n          _this12._changeDetectorRef.markForCheck();\n        }\n      });\n    }\n  }, {\n    key: \"open\",\n    value: function open() {\n      var _this13 = this;\n\n      if (_get(_getPrototypeOf(MatSelect.prototype), \"_canOpen\", this).call(this)) {\n        _get(_getPrototypeOf(MatSelect.prototype), \"open\", this).call(this);\n\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect(); // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n\n        this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n        this._calculateOverlayPosition(); // Set the font size on the panel element once it exists.\n\n\n        this._ngZone.onStable.pipe(take(1)).subscribe(function () {\n          if (_this13._triggerFontSize && _this13._overlayDir.overlayRef && _this13._overlayDir.overlayRef.overlayElement) {\n            _this13._overlayDir.overlayRef.overlayElement.style.fontSize = \"\".concat(_this13._triggerFontSize, \"px\");\n          }\n        });\n      }\n    }\n    /** Scrolls the active option into view. */\n\n  }, {\n    key: \"_scrollOptionIntoView\",\n    value: function _scrollOptionIntoView(index) {\n      var labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n\n      var itemHeight = this._getItemHeight();\n\n      if (index === 0 && labelCount === 1) {\n        // If we've got one group label before the option and we're at the top option,\n        // scroll the list to the top. This is better UX than scrolling the list to the\n        // top of the option, because it allows the user to read the top group's label.\n        this.panel.nativeElement.scrollTop = 0;\n      } else {\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n      }\n    }\n  }, {\n    key: \"_positioningSettled\",\n    value: function _positioningSettled() {\n      this._calculateOverlayOffsetX();\n\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    }\n  }, {\n    key: \"_panelDoneAnimating\",\n    value: function _panelDoneAnimating(isOpen) {\n      if (this.panelOpen) {\n        this._scrollTop = 0;\n      } else {\n        this._overlayDir.offsetX = 0;\n\n        this._changeDetectorRef.markForCheck();\n      }\n\n      _get(_getPrototypeOf(MatSelect.prototype), \"_panelDoneAnimating\", this).call(this, isOpen);\n    }\n  }, {\n    key: \"_getChangeEvent\",\n    value: function _getChangeEvent(value) {\n      return new MatSelectChange(this, value);\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n\n  }, {\n    key: \"_calculateOverlayOffsetX\",\n    value: function _calculateOverlayOffsetX() {\n      var overlayRect = this._overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n\n      var viewportSize = this._viewportRuler.getViewportSize();\n\n      var isRtl = this._isRtl();\n\n      var paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X : SELECT_PANEL_PADDING_X * 2;\n      var offsetX; // Adjust the offset, depending on the option padding.\n\n      if (this.multiple) {\n        offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n      } else if (this.disableOptionCentering) {\n        offsetX = SELECT_PANEL_PADDING_X;\n      } else {\n        var selected = this._selectionModel.selected[0] || this.options.first;\n        offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n      } // Invert the offset in LTR.\n\n\n      if (!isRtl) {\n        offsetX *= -1;\n      } // Determine how much the select overflows on each side.\n\n\n      var leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n      var rightOverflow = overlayRect.right + offsetX - viewportSize.width + (isRtl ? 0 : paddingWidth); // If the element overflows on either side, reduce the offset to allow it to fit.\n\n      if (leftOverflow > 0) {\n        offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n      } else if (rightOverflow > 0) {\n        offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n      } // Set the offset directly in order to avoid having to go through change detection and\n      // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n      // blurry content in some browsers.\n\n\n      this._overlayDir.offsetX = Math.round(offsetX);\n\n      this._overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n\n  }, {\n    key: \"_calculateOverlayOffsetY\",\n    value: function _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n      var itemHeight = this._getItemHeight();\n\n      var optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n      var maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n      var optionOffsetFromPanelTop; // Disable offset if requested by user by returning 0 as value to offset\n\n      if (this.disableOptionCentering) {\n        return 0;\n      }\n\n      if (this._scrollTop === 0) {\n        optionOffsetFromPanelTop = selectedIndex * itemHeight;\n      } else if (this._scrollTop === maxScroll) {\n        var firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n        var selectedDisplayIndex = selectedIndex - firstDisplayedIndex; // The first item is partially out of the viewport. Therefore we need to calculate what\n        // portion of it is shown in the viewport and account for it in our offset.\n\n        var partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight; // Because the panel height is longer than the height of the options alone,\n        // there is always extra padding at the top or bottom of the panel. When\n        // scrolled to the very bottom, this padding is at the top of the panel and\n        // must be added to the offset.\n\n        optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n      } else {\n        // If the option was scrolled to the middle of the panel using a scroll buffer,\n        // its offset will be the scroll buffer minus the half height that was added to\n        // center it.\n        optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n      } // The final offset is the option's offset from the top, adjusted for the height difference,\n      // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n      // The value is rounded to prevent some browsers from blurring the content.\n\n\n      return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n\n  }, {\n    key: \"_checkOverlayWithinViewport\",\n    value: function _checkOverlayWithinViewport(maxScroll) {\n      var itemHeight = this._getItemHeight();\n\n      var viewportSize = this._viewportRuler.getViewportSize();\n\n      var topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n      var bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n      var panelHeightTop = Math.abs(this._offsetY);\n      var totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n      var panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n      if (panelHeightBottom > bottomSpaceAvailable) {\n        this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n      } else if (panelHeightTop > topSpaceAvailable) {\n        this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n      } else {\n        this._transformOrigin = this._getOriginBasedOnOption();\n      }\n    }\n    /** Adjusts the overlay panel up to fit in the viewport. */\n\n  }, {\n    key: \"_adjustPanelUp\",\n    value: function _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n      // Browsers ignore fractional scroll offsets, so we need to round.\n      var distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable); // Scrolls the panel up by the distance it was extending past the boundary, then\n      // adjusts the offset by that amount to move the panel up into the viewport.\n\n      this._scrollTop -= distanceBelowViewport;\n      this._offsetY -= distanceBelowViewport;\n      this._transformOrigin = this._getOriginBasedOnOption(); // If the panel is scrolled to the very top, it won't be able to fit the panel\n      // by scrolling, so set the offset to 0 to allow the fallback position to take\n      // effect.\n\n      if (this._scrollTop <= 0) {\n        this._scrollTop = 0;\n        this._offsetY = 0;\n        this._transformOrigin = \"50% bottom 0px\";\n      }\n    }\n    /** Adjusts the overlay panel down to fit in the viewport. */\n\n  }, {\n    key: \"_adjustPanelDown\",\n    value: function _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n      // Browsers ignore fractional scroll offsets, so we need to round.\n      var distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable); // Scrolls the panel down by the distance it was extending past the boundary, then\n      // adjusts the offset by that amount to move the panel down into the viewport.\n\n      this._scrollTop += distanceAboveViewport;\n      this._offsetY += distanceAboveViewport;\n      this._transformOrigin = this._getOriginBasedOnOption(); // If the panel is scrolled to the very bottom, it won't be able to fit the\n      // panel by scrolling, so set the offset to 0 to allow the fallback position\n      // to take effect.\n\n      if (this._scrollTop >= maxScroll) {\n        this._scrollTop = maxScroll;\n        this._offsetY = 0;\n        this._transformOrigin = \"50% top 0px\";\n        return;\n      }\n    }\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n\n  }, {\n    key: \"_calculateOverlayPosition\",\n    value: function _calculateOverlayPosition() {\n      var itemHeight = this._getItemHeight();\n\n      var items = this._getItemCount();\n\n      var panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n      var scrollContainerHeight = items * itemHeight; // The farthest the panel can be scrolled before it hits the bottom\n\n      var maxScroll = scrollContainerHeight - panelHeight; // If no value is selected we open the popup to the first item.\n\n      var selectedOptionOffset;\n\n      if (this.empty) {\n        selectedOptionOffset = 0;\n      } else {\n        selectedOptionOffset = Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n      }\n\n      selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups); // We must maintain a scroll buffer so the selected option will be scrolled to the\n      // center of the overlay panel rather than the top.\n\n      var scrollBuffer = panelHeight / 2;\n      this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n      this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n      this._checkOverlayWithinViewport(maxScroll);\n    }\n    /** Sets the transform origin point based on the selected option. */\n\n  }, {\n    key: \"_getOriginBasedOnOption\",\n    value: function _getOriginBasedOnOption() {\n      var itemHeight = this._getItemHeight();\n\n      var optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n      var originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n      return \"50% \".concat(originY, \"px 0px\");\n    }\n    /** Calculates the height of the select's options. */\n\n  }, {\n    key: \"_getItemHeight\",\n    value: function _getItemHeight() {\n      return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n\n  }, {\n    key: \"_getItemCount\",\n    value: function _getItemCount() {\n      return this.options.length + this.optionGroups.length;\n    }\n  }]);\n\n  return MatSelect;\n}(_MatSelectBase);\n\nMatSelect.ɵfac = /* @__PURE__ */function () {\n  var ɵMatSelect_BaseFactory;\n  return function MatSelect_Factory(t) {\n    return (ɵMatSelect_BaseFactory || (ɵMatSelect_BaseFactory = i0.ɵɵgetInheritedFactory(MatSelect)))(t || MatSelect);\n  };\n}();\n\nMatSelect.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatSelect,\n  selectors: [[\"mat-select\"]],\n  contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MAT_SELECT_TRIGGER, 5);\n      i0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n      i0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.options = _t);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    }\n  },\n  hostAttrs: [\"role\", \"combobox\", \"aria-autocomplete\", \"none\", \"aria-haspopup\", \"true\", 1, \"mat-select\"],\n  hostVars: 20,\n  hostBindings: function MatSelect_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"focus\", function MatSelect_focus_HostBindingHandler() {\n        return ctx._onFocus();\n      })(\"blur\", function MatSelect_blur_HostBindingHandler() {\n        return ctx._onBlur();\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx.panelOpen ? ctx.id + \"-panel\" : null)(\"aria-expanded\", ctx.panelOpen)(\"aria-label\", ctx.ariaLabel || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n      i0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty)(\"mat-select-multiple\", ctx.multiple);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    tabIndex: \"tabIndex\"\n  },\n  exportAs: [\"matSelect\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatSelect\n  }, {\n    provide: MAT_OPTION_PARENT_COMPONENT,\n    useExisting: MatSelect\n  }]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c3,\n  decls: 9,\n  vars: 12,\n  consts: [[\"cdk-overlay-origin\", \"\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder mat-select-min-line\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\", \"mat-select-min-line\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [\"class\", \"mat-select-min-line\", 4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-min-line\"], [1, \"mat-select-panel-wrap\"], [\"role\", \"listbox\", \"tabindex\", \"-1\", 3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]],\n  template: function MatSelect_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c2);\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() {\n        return ctx.toggle();\n      });\n      i0.ɵɵelementStart(3, \"div\", 2);\n      i0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n      i0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"div\", 5);\n      i0.ɵɵelement(7, \"div\", 6);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 14, \"ng-template\", 7);\n      i0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() {\n        return ctx.close();\n      })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() {\n        return ctx._onAttached();\n      })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() {\n        return ctx.close();\n      });\n    }\n\n    if (rf & 2) {\n      var _r0 = i0.ɵɵreference(1);\n\n      i0.ɵɵattribute(\"aria-owns\", ctx.panelOpen ? ctx.id + \"-panel\" : null);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n      i0.ɵɵattribute(\"id\", ctx._valueId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngSwitchCase\", true);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngSwitchCase\", false);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"cdkConnectedOverlayPanelClass\", ctx._overlayPanelClass)(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n    }\n  },\n  directives: [i7.CdkOverlayOrigin, i8.NgSwitch, i8.NgSwitchCase, i8.NgSwitchDefault, i7.CdkConnectedOverlay, i8.NgClass],\n  styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{height:16px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-form-field.mat-focused .mat-select-arrow{transform:translateX(0)}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;opacity:0}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSelect, [{\n    type: Component,\n    args: [{\n      selector: 'mat-select',\n      exportAs: 'matSelect',\n      inputs: ['disabled', 'disableRipple', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'role': 'combobox',\n        'aria-autocomplete': 'none',\n        // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\n        // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\n        // value. At some point we should try to switch it back to being `listbox`.\n        'aria-haspopup': 'true',\n        'class': 'mat-select',\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n        '[attr.aria-expanded]': 'panelOpen',\n        '[attr.aria-label]': 'ariaLabel || null',\n        '[attr.aria-required]': 'required.toString()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.aria-describedby]': '_ariaDescribedby || null',\n        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n        '[class.mat-select-disabled]': 'disabled',\n        '[class.mat-select-invalid]': 'errorState',\n        '[class.mat-select-required]': 'required',\n        '[class.mat-select-empty]': 'empty',\n        '[class.mat-select-multiple]': 'multiple',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': '_onFocus()',\n        '(blur)': '_onBlur()'\n      },\n      animations: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel],\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatSelect\n      }, {\n        provide: MAT_OPTION_PARENT_COMPONENT,\n        useExisting: MatSelect\n      }],\n      template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n      styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{height:16px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-form-field.mat-focused .mat-select-arrow{transform:translateX(0)}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;opacity:0}\\n\"]\n    }]\n  }], null, {\n    options: [{\n      type: ContentChildren,\n      args: [MatOption, {\n        descendants: true\n      }]\n    }],\n    optionGroups: [{\n      type: ContentChildren,\n      args: [MAT_OPTGROUP, {\n        descendants: true\n      }]\n    }],\n    customTrigger: [{\n      type: ContentChild,\n      args: [MAT_SELECT_TRIGGER]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatSelectModule = /*#__PURE__*/_createClass(function MatSelectModule() {\n  _classCallCheck(this, MatSelectModule);\n});\n\nMatSelectModule.ɵfac = function MatSelectModule_Factory(t) {\n  return new (t || MatSelectModule)();\n};\n\nMatSelectModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatSelectModule\n});\nMatSelectModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n  imports: [[CommonModule, OverlayModule, MatOptionModule, MatCommonModule], CdkScrollableModule, MatFormFieldModule, MatOptionModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSelectModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n      exports: [CdkScrollableModule, MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n      declarations: [MatSelect, MatSelectTrigger],\n      providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };","map":{"version":3,"sources":["/Users/VIDIT/Desktop/recovery-project/node_modules/@angular/material/fesm2015/select.mjs"],"names":["i7","Overlay","CdkConnectedOverlay","OverlayModule","i8","CommonModule","i0","InjectionToken","Directive","EventEmitter","Optional","Inject","Self","Attribute","ViewChild","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","ContentChild","NgModule","i2","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MAT_OPTION_PARENT_COMPONENT","MatOption","MAT_OPTGROUP","MatOptionModule","MatCommonModule","i6","MAT_FORM_FIELD","MatFormFieldControl","MatFormFieldModule","i1","CdkScrollableModule","i5","ActiveDescendantKeyManager","coerceBooleanProperty","coerceNumberProperty","SelectionModel","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","hasModifierKey","A","i4","Validators","Subject","defer","merge","startWith","switchMap","take","filter","map","distinctUntilChanged","takeUntil","trigger","transition","query","animateChild","state","style","animate","i3","matSelectAnimations","transformPanelWrap","optional","transformPanel","transform","minWidth","opacity","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","nextUniqueId","SELECT_PANEL_MAX_HEIGHT","SELECT_PANEL_PADDING_X","SELECT_PANEL_INDENT_PADDING_X","SELECT_ITEM_HEIGHT_EM","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_VIEWPORT_PADDING","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MatSelectChange","source","value","_MatSelectMixinBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","MAT_SELECT_TRIGGER","MatSelectTrigger","ɵfac","ɵdir","useExisting","type","args","selector","providers","_MatSelectBase","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_defaultOptions","_a","_b","_c","_panelOpen","_compareWith","o1","o2","_uid","_triggerAriaLabelledBy","_destroy","_onChange","_onTouched","_valueId","_panelDoneAnimatingStream","_overlayPanelClass","overlayPanelClass","_focused","controlType","_multiple","_disableOptionCentering","disableOptionCentering","ariaLabel","optionSelectionChanges","options","changes","pipe","option","onSelectionChange","onStable","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","valueAccessor","typeaheadDebounceInterval","_typeaheadDebounceInterval","_scrollStrategyFactory","_scrollStrategy","parseInt","id","_placeholder","stateChanges","next","_d","_required","control","hasValidator","required","_selectionModel","ngDevMode","fn","_initializeSelection","_value","newValue","hasAssigned","_assignValue","_id","multiple","subscribe","_panelDoneAnimating","panelOpen","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","newAriaLabelledby","_getTriggerAriaLabelledby","element","nativeElement","setAttribute","removeAttribute","_previousControl","undefined","disabled","updateErrorState","_keyManager","withTypeAhead","complete","close","open","_canOpen","withHorizontalOrientation","_highlightCorrectOption","markForCheck","_isRtl","isDisabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","isOpenKey","manager","isTyping","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","_selectViaInteraction","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_overlayDir","positionChange","detectChanges","_positioningSettled","color","isEmpty","Promise","resolve","then","_setSelectionByValue","setInactiveStyles","clear","Array","isArray","currentValue","_selectOptionByValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","error","console","warn","withVerticalOrientation","withHomeAndEnd","withAllowedModifierKeys","tabOut","focus","change","panel","_scrollOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","_propagateChanges","setActiveItem","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","emit","_getChangeEvent","setFirstItemActive","length","labelId","getLabelId","labelExpression","ariaLabelledby","isOpen","ids","_ariaDescribedby","ViewportRuler","ChangeDetectorRef","NgZone","ErrorStateMatcher","ElementRef","Directionality","NgForm","FormGroupDirective","NgControl","LiveAnnouncer","decorators","MatFormField","panelClass","placeholder","compareWith","errorStateMatcher","MatSelect","arguments","_scrollTop","_triggerFontSize","_transformOrigin","_offsetY","_positions","originX","originY","overlayX","overlayY","selectedIndex","scrollBuffer","maxScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","Math","min","max","_triggerRect","getBoundingClientRect","getComputedStyle","fontSize","_calculateOverlayPosition","overlayRef","overlayElement","index","labelCount","optionGroups","scrollTop","_calculateOverlayOffsetX","offsetX","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","first","group","leftOverflow","left","rightOverflow","right","width","round","updatePosition","optionHeightAdjustment","height","maxOptionsDisplayed","floor","optionOffsetFromPanelTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","items","panelHeight","scrollContainerHeight","selectedOptionOffset","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","ɵcmp","CdkOverlayOrigin","NgSwitch","NgSwitchCase","NgSwitchDefault","NgClass","exportAs","inputs","encapsulation","None","changeDetection","OnPush","host","animations","template","styles","descendants","customTrigger","MatSelectModule","ɵmod","ɵinj","imports","exports","declarations"],"mappings":"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","sourcesContent":["import * as i7 from '@angular/cdk/overlay';\nimport { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i8 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, EventEmitter, Optional, Inject, Self, Attribute, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/cdk/a11y';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport * as i4 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\nimport * as i3 from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true })),\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0,\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            transform: 'scaleY(1)',\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            transform: 'scaleY(1)',\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/** The max height of the select's overlay panel. */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis. */\nconst SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** The height of the select items in `em` units. */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(class {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatSelectTrigger.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatSelectTrigger, selector: \"mat-select-trigger\", providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-select-trigger',\n                    providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }],\n                }]\n        }] });\n/** Base class with all of the `MatSelect` functionality. */\nclass _MatSelectBase extends _MatSelectMixinBase {\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        var _a, _b, _c;\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `ariar-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.overlayPanelClass) || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        this._multiple = false;\n        this._disableOptionCentering = (_c = (_b = this._defaultOptions) === null || _b === void 0 ? void 0 : _b.disableOptionCentering) !== null && _c !== void 0 ? _c : false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable.pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if ((_defaultOptions === null || _defaultOptions === void 0 ? void 0 : _defaultOptions.typeaheadDebounceInterval) != null) {\n            this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() {\n        var _a, _b, _c, _d;\n        return (_d = (_a = this._required) !== null && _a !== void 0 ? _a : (_c = (_b = this.ngControl) === null || _b === void 0 ? void 0 : _b.control) === null || _c === void 0 ? void 0 : _c.hasValidator(Validators.required)) !== null && _d !== void 0 ? _d : false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() {\n        return this._disableOptionCentering;\n    }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        const hasAssigned = this._assignValue(newValue);\n        if (hasAssigned) {\n            this._onChange(newValue);\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() {\n        return this._typeaheadDebounceInterval;\n    }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        const ngControl = this.ngControl;\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (ngControl) {\n            // The disabled state might go out of sync if the form group is swapped out. See #17860.\n            if (this._previousControl !== ngControl.control) {\n                if (this._previousControl !== undefined &&\n                    ngControl.disabled !== null &&\n                    ngControl.disabled !== this.disabled) {\n                    this.disabled = ngControl.disabled;\n                }\n                this._previousControl = ngControl.control;\n            }\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this._canOpen()) {\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this._assignValue(value);\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        var _a, _b;\n        return this.multiple ? ((_a = this._selectionModel) === null || _a === void 0 ? void 0 : _a.selected) || [] : (_b = this._selectionModel) === null || _b === void 0 ? void 0 : _b.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW ||\n            keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW ||\n            keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping &&\n            (keyCode === ENTER || keyCode === SPACE) &&\n            manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple &&\n                isArrowKey &&\n                event.shiftKey &&\n                manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl) {\n                this._value = this.ngControl.value;\n            }\n            this._setSelectionByValue(this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this._selectionModel.selected.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectOptionByValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectOptionByValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectOptionByValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Assigns a specific value to the select. Returns whether the value has changed. */\n    _assignValue(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n            return true;\n        }\n        return false;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected\n                    ? this._selectionModel.select(option)\n                    : this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator\n                    ? this.sortComparator(a, b, options)\n                    : options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        var _a;\n        return !this._panelOpen && !this.disabled && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty || (this._focused && !!this._placeholder);\n    }\n}\n_MatSelectBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatSelectBase, deps: [{ token: i1.ViewportRuler }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i2.ErrorStateMatcher }, { token: i0.ElementRef }, { token: i3.Directionality, optional: true }, { token: i4.NgForm, optional: true }, { token: i4.FormGroupDirective, optional: true }, { token: MAT_FORM_FIELD, optional: true }, { token: i4.NgControl, optional: true, self: true }, { token: 'tabindex', attribute: true }, { token: MAT_SELECT_SCROLL_STRATEGY }, { token: i5.LiveAnnouncer }, { token: MAT_SELECT_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\n_MatSelectBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatSelectBase, inputs: { panelClass: \"panelClass\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", sortComparator: \"sortComparator\", id: \"id\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, viewQueries: [{ propertyName: \"trigger\", first: true, predicate: [\"trigger\"], descendants: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }, { propertyName: \"_overlayDir\", first: true, predicate: CdkConnectedOverlay, descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatSelectBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i1.ViewportRuler }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i2.ErrorStateMatcher }, { type: i0.ElementRef }, { type: i3.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: i4.NgForm, decorators: [{\n                        type: Optional\n                    }] }, { type: i4.FormGroupDirective, decorators: [{\n                        type: Optional\n                    }] }, { type: i6.MatFormField, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_FORM_FIELD]\n                    }] }, { type: i4.NgControl, decorators: [{\n                        type: Self\n                    }, {\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['tabindex']\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_SELECT_SCROLL_STRATEGY]\n                    }] }, { type: i5.LiveAnnouncer }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_SELECT_CONFIG]\n                    }] }];\n    }, propDecorators: { trigger: [{\n                type: ViewChild,\n                args: ['trigger']\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], _overlayDir: [{\n                type: ViewChild,\n                args: [CdkConnectedOverlay]\n            }], panelClass: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], disableOptionCentering: [{\n                type: Input\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], errorStateMatcher: [{\n                type: Input\n            }], typeaheadDebounceInterval: [{\n                type: Input\n            }], sortComparator: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], selectionChange: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }] } });\nclass MatSelect extends _MatSelectBase {\n    constructor() {\n        super(...arguments);\n        /** The scroll position of the overlay panel, calculated to center the selected option. */\n        this._scrollTop = 0;\n        /** The cached font-size of the trigger element. */\n        this._triggerFontSize = 0;\n        /** The value of the select panel's transform-origin property. */\n        this._transformOrigin = 'top';\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    open() {\n        if (super._canOpen()) {\n            super.open();\n            this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n            // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n            // `parseInt` ignores the trailing 'px' and converts this to a number.\n            this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n            this._calculateOverlayPosition();\n            // Set the font size on the panel element once it exists.\n            this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n                if (this._triggerFontSize &&\n                    this._overlayDir.overlayRef &&\n                    this._overlayDir.overlayRef.overlayElement) {\n                    this._overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n                }\n            });\n        }\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n        const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n        const itemHeight = this._getItemHeight();\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            this.panel.nativeElement.scrollTop = 0;\n        }\n        else {\n            this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n        }\n    }\n    _positioningSettled() {\n        this._calculateOverlayOffsetX();\n        this.panel.nativeElement.scrollTop = this._scrollTop;\n    }\n    _panelDoneAnimating(isOpen) {\n        if (this.panelOpen) {\n            this._scrollTop = 0;\n        }\n        else {\n            this._overlayDir.offsetX = 0;\n            this._changeDetectorRef.markForCheck();\n        }\n        super._panelDoneAnimating(isOpen);\n    }\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    _calculateOverlayOffsetX() {\n        const overlayRect = this._overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        const paddingWidth = this.multiple\n            ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X\n            : SELECT_PANEL_PADDING_X * 2;\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else if (this.disableOptionCentering) {\n            offsetX = SELECT_PANEL_PADDING_X;\n        }\n        else {\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this._overlayDir.offsetX = Math.round(offsetX);\n        this._overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this.disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            let partialItemHeight = itemHeight - ((this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight);\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    _calculateOverlayPosition() {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset;\n        if (this.empty) {\n            selectedOptionOffset = 0;\n        }\n        else {\n            selectedOptionOffset = Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n        }\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /** Sets the transform origin point based on the selected option. */\n    _getOriginBasedOnOption() {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /** Calculates the height of the select's options. */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n}\nMatSelect.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelect, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatSelect.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatSelect, selector: \"mat-select\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, host: { attributes: { \"role\": \"combobox\", \"aria-autocomplete\": \"none\", \"aria-haspopup\": \"true\" }, listeners: { \"keydown\": \"_handleKeydown($event)\", \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"attr.id\": \"id\", \"attr.tabindex\": \"tabIndex\", \"attr.aria-controls\": \"panelOpen ? id + \\\"-panel\\\" : null\", \"attr.aria-expanded\": \"panelOpen\", \"attr.aria-label\": \"ariaLabel || null\", \"attr.aria-required\": \"required.toString()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-describedby\": \"_ariaDescribedby || null\", \"attr.aria-activedescendant\": \"_getAriaActiveDescendant()\", \"class.mat-select-disabled\": \"disabled\", \"class.mat-select-invalid\": \"errorState\", \"class.mat-select-required\": \"required\", \"class.mat-select-empty\": \"empty\", \"class.mat-select-multiple\": \"multiple\" }, classAttribute: \"mat-select\" }, providers: [\n        { provide: MatFormFieldControl, useExisting: MatSelect },\n        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n    ], queries: [{ propertyName: \"customTrigger\", first: true, predicate: MAT_SELECT_TRIGGER, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], exportAs: [\"matSelect\"], usesInheritance: true, ngImport: i0, template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{height:16px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-form-field.mat-focused .mat-select-arrow{transform:translateX(0)}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;opacity:0}\\n\"], directives: [{ type: i7.CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }, { type: i8.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { type: i8.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { type: i8.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }, { type: i7.CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { type: i8.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], animations: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelect, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-select', exportAs: 'matSelect', inputs: ['disabled', 'disableRipple', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'role': 'combobox',\n                        'aria-autocomplete': 'none',\n                        // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\n                        // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\n                        // value. At some point we should try to switch it back to being `listbox`.\n                        'aria-haspopup': 'true',\n                        'class': 'mat-select',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'tabIndex',\n                        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                        '[attr.aria-expanded]': 'panelOpen',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-describedby]': '_ariaDescribedby || null',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        '[class.mat-select-disabled]': 'disabled',\n                        '[class.mat-select-invalid]': 'errorState',\n                        '[class.mat-select-required]': 'required',\n                        '[class.mat-select-empty]': 'empty',\n                        '[class.mat-select-multiple]': 'multiple',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                    }, animations: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel], providers: [\n                        { provide: MatFormFieldControl, useExisting: MatSelect },\n                        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n                    ], template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{height:16px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-form-field.mat-focused .mat-select-arrow{transform:translateX(0)}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;opacity:0}\\n\"] }]\n        }], propDecorators: { options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], customTrigger: [{\n                type: ContentChild,\n                args: [MAT_SELECT_TRIGGER]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSelectModule {\n}\nMatSelectModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSelectModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectModule, declarations: [MatSelect, MatSelectTrigger], imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule], exports: [CdkScrollableModule,\n        MatFormFieldModule,\n        MatSelect,\n        MatSelectTrigger,\n        MatOptionModule,\n        MatCommonModule] });\nMatSelectModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectModule, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [[CommonModule, OverlayModule, MatOptionModule, MatCommonModule], CdkScrollableModule,\n        MatFormFieldModule,\n        MatOptionModule,\n        MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatFormFieldModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    declarations: [MatSelect, MatSelectTrigger],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };\n"]},"metadata":{},"sourceType":"module"}